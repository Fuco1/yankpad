#+TITLE:yankpad.el [[http://melpa.org/#/yankpad][file:http://melpa.org/packages/yankpad-badge.svg]]

Let's say that you have text snippets that you want to paste, but that [[http://capitaomorte.github.io/yasnippet/][yasnippet]]
or [[https://www.emacswiki.org/emacs/SkeletonMode][skeleton]] is a bit too much when you do not need a shortcut/abbrev for your
snippet. You like org-mode, so why not write your snippets there? Introducing
the yankpad:

#+BEGIN_SRC org
  ,* Category 1

  ,** Snippet title

      Here's a text snippet I want to insert.

  ,** Snippet with keybinding                               :last:tag:is:key:o:

      And here's another snippet. This snippet has tags, and the last of these
      tags should be a key. This will bind the snippet to the key (in this case
      "o") when first calling yankpad-map.

  ,** expandword: Snippet with keyword expansion

      This snippet has a keyword; "expandword" in this case. If this category is
      active, and you type the keyword into a buffer and use the "yankpad-expand"
      command, the keyword will be replaced with this snippet.

  ,* Category 2

  ,** Explaining categories

      This snippet belongs to another category. Categories are useful if you need
      several yankpads, for instance if you're a teacher (like me) working with
      different courses.

  ,** yasnippet magic

      If you have yasnippet installed (not a requirement), the content in each snippet
      is actually executed by yasnippet! This means that you could run elisp
      inside your snippets: `(+ 3 4)` and have handy tab stop fields.

      | Student | Grade |
      |---------+-------|
      | $1      | $2    |

      That's pretty handy!
      $0

  ,** The source block below will be executed if tag is func :func:
      ,#+BEGIN_SRC emacs-lisp
      ;; Instead of a src-block, the snippet may be named
      ;; the same as an emacs-lisp function. This will then
      ;; be executed without arguments (see next example).
      (elfeed)
      ,#+END_SRC

  ,** elfeed                                            :func:e:

  ,* org-mode

  ,** Major-mode categories

      If you have a category with the same name as a major-mode, that category will be
      activated when switching major-mode. This only affects the local buffer and does
      not modify the global category.

  ,* my-projectile-project

  ,** Projectile based categories

      If you have projectile installed (not a requirement) you can give a category the
      same name as one of your projectile projects. That category will be activated
      when using projectile-find-file on a file in the project.
#+END_SRC

* Setup

1. Install =yankpad= from Melpa, or download =yankpad.el= and add it to your load-path and require it.
2. The default location for the yankpad file is =yankpad.org= in your =org-directory=. This can be changed by modifying the =yankpad-file= variable.
3. Optionally bind =yankpad-map=, =yankpad-insert=, and/or =yankpad-expand= to a key.
4. That's it!

If you want different heading levels for the categories (default 1) or snippets (default 2), change the value of =yankpad-category-heading-level= and/or =yankpad-snippet-heading-level=.

By default keywords are defined by a word at the start of a snippet title, followed by a colon (=:=). You can change =:= into another string by changing the =yankpad-expand-separator= variable.

Here's an example setup using the excellent [[https://github.com/jwiegley/use-package][use-package]]:

#+BEGIN_SRC emacs-lisp
  (use-package yankpad
    :ensure t
    :defer 10
    :init
    (setq yankpad-file "~/yankpad.org")
    :config
    (bind-key "<f7>" 'yankpad-map)
    (bind-key "<f12>" 'yankpad-expand))
#+END_SRC

* Usage

1. Add snippet entries to your =yankpad-file=. Level 1 headings are categories and level 2 headings are snippets (by default).
2. If a snippet has a tag named =func=, it won't insert text. Instead a function will be executed upon "inserting" the snippet. The name of the snippet can be an elisp function, which will be run without arguments. Instead, the function could hold a single =org-mode= src-block, which will be executed in a separate buffer (so the code in the src-block does not have access to the current buffer).
3. The last tag of a snippet (except if the last tag is =func=) will add the tag as a keybinding when first calling =yankpad-map=. This way you could bind =yankpad-map= to a key and press that key, followed by the tag key, in order to insert the snippet.
4. Insert a snippet with =M-x yankpad-insert=. If the snippet has a keyword, you can write that keyword into the buffer and use =M-x yankpad-expand= instead. It may be useful to bind these commands to some key on your keyboard.
5. If you want to change category, use =M-x yankpad-set-category=. If you have a category with the same name as a major-mode (for instance =org-mode=), that category will be locally set when switching major-mode. In the same manner you can name a category to one of your Projectile project names (if Projectile is installed). If there's a clash between major-mode and Projectile categories, Projectile will take precedence.
6. To quickly open your =yankpad-file= for editing, run =M-x yankpad-edit=.

Since a =*= at the beginning of a line would specify a new heading, lines can not begin with =*=. However, you can write =\*= at the beginning of a line, which will be replaced by a =*= when expanding the snippet. If you use this in order to yank snippets into an =org-mode= buffer, the new headings will be automatically indented -- depending on the current level -- by default. This can be changed by setting the variable =yankpad-respect-current-org-level= to =nil=.

Sometimes it may be useful to set the category automatically for a specific file. In this case you can add =yankpad-category= as a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html][file variable]], for instance by adding this line at the top of your file:

#+BEGIN_SRC
-*- yankpad-category: "Category name"; -*-
#+END_SRC

* Changelog

- 1.30 (August 2016) :: Snippets can now have keywords. If typing the snippet keyword into the buffer, the snippet can be expanded by calling =yankpad-expand=. Just name the snippet =expandword: Snippet name= and you can type =expandword M-x yankpad-expand= to insert it.
- 1.20 (July 2016) :: Snippets can be used to execute functions, instead of inserting text. Add the tag =func= to your snippet. The snippet can contain an =org-mode= src-block, which will be executed, or the snippet may be named the same as an emacs-lisp function, which will be executed without arguments.
- 1.10 (May 2016) :: Snippets can have keybindings by tagging them. The last tag will be interpreted as a key and inserted into =yankpad-map=.
